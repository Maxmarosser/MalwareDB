package main;

import static java.nio.file.StandardCopyOption.*;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;

import database.Malware;

public class Main {
	private static final String PERSISTENCE_UNIT_NAME = "malware";
	public static String storagePath = ("/home/wojtyla/workspaceEclipse/MalwareDB/to/");

	public static void main(String[] args) {
		// System.out.println(args.length);
		
		database();
		if ((args.length == 1) && (args[0].contentEquals("-h"))) {
			help();
			System.exit(0);
		}
		if ((args.length > 1)) {
			Path file = Paths.get(args[args.length - 1]);
			// Path path = Paths.get(args[args.length-2]);
			System.out.println("File: " + file.toString());
			// System.out.println("File: "+path.toString());

			String md5hash = md5Convertion(file);
			String sha1hash = sha1Convertion(file);
			System.out.println("MD5 hascode: " + md5hash);
			System.out.println("SHA1 hascode: " + sha1hash);
			moveFile(file);
		} else {
			help();
		}

		// moveFile();

	}

	private static void database() {
		// ./ij
		// connect 'jdbc:derby:/home/wojtyla/workspaceEclipse/databases/MalwareDB';
		// show tables;
		// disconnect;
		
		EntityManagerFactory factory = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT_NAME);
		EntityManager em = factory.createEntityManager();
		
		em.getTransaction().begin();

		Malware first = new Malware();
		first.setMd5hash("55");
		first.setSha1hash("44");
		
		em.persist(first);

	    Query q = em.createQuery("select m from Malware m");
	    
	    System.out.println(q.getResultList());
	    
	    em.getTransaction().commit();

		em.close();
		factory.close();
		
	System.exit(0);
	}

	private static void help() {
		System.out.println("mwcol -arg1 -arg2 path file");
		System.out.println("-mv - move malware to DB");
		System.out.println("-cp - copy malware to DB");

	}

	/*
	 * it moves the file to storage location and rename it with md5 hash
	 * existing file is overwritten
	 */
	private static void moveFile(Path file) {
		Path target = Paths.get(storagePath, md5Convertion(file));
		try {
			Files.move(file, target, REPLACE_EXISTING);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	/*
	 * Function calculate md5 hash of given file
	 *
	 */
	public static String md5Convertion(Path file) {
		try {
			MessageDigest md = MessageDigest.getInstance("MD5");

			FileInputStream fis = new FileInputStream(file.toFile());

			byte[] dataBytes = new byte[9999];

			int read = 0;

			while ((read = fis.read(dataBytes)) != -1) {
				md.update(dataBytes, 0, read);
			}
			;

			byte[] mdbytes = md.digest();

			StringBuffer hexString = new StringBuffer();
			for (int i = 0; i < mdbytes.length; i++) {
				String hex = Integer.toHexString(0xff & mdbytes[i]);
				if (hex.length() == 1)
					hexString.append('0');
				hexString.append(hex);
			}

			fis.close();
			return hexString.toString();

		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return "0";

	}

	/*
	 * Function calculate sha1 hash of given file
	 *
	 */
	public static String sha1Convertion(Path file) {
		try {
			MessageDigest md = MessageDigest.getInstance("SHA1");

			FileInputStream fis = new FileInputStream(file.toFile());

			byte[] dataBytes = new byte[9999];

			int read = 0;

			while ((read = fis.read(dataBytes)) != -1) {
				md.update(dataBytes, 0, read);
			}
			;

			byte[] mdbytes = md.digest();

			StringBuffer hexString = new StringBuffer();
			for (int i = 0; i < mdbytes.length; i++) {
				String hex = Integer.toHexString(0xff & mdbytes[i]);
				if (hex.length() == 1)
					hexString.append('0');
				hexString.append(hex);
			}

			fis.close();
			return hexString.toString();

		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return "0";

	}

}
