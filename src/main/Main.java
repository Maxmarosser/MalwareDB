package main;

import static java.nio.file.StandardCopyOption.*;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.nio.file.DirectoryNotEmptyException;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.NamedQuery;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import org.apache.commons.cli.*;

import database.Malware;

public class Main {
    private static final String PERSISTENCE_UNIT_NAME = "malware";
    private static String databasePath = "";
    private static String storagePath = "";
    private static String databaseUser = "";
    private static String databasePassword = "";
    private static String databaseDriver = "org.apache.derby.jdbc.EmbeddedDriver";
    private static String databasePathPrefix = "jdbc:derby:";
    private static String databasePathSuffix = ";create=true";
    private static boolean debugMode = false;

    private static EntityManagerFactory factory;
    private static EntityManager em;

    private static Options options;

    public static void main(String[] args) {

	// if ((args.length <= 1) || (args[0].contentEquals("-h"))) {
	// //help();
	// System.exit(0);
	// }

	options = setupOptions();
	CommandLineParser parser = new PosixParser();
	CommandLine cmdLine = null;

	try {
	    cmdLine = parser.parse(options, args);
	} catch (ParseException e) {
	    System.out.println(e.getMessage());
	    help2();
	    System.exit(0);
	}

	if (cmdLine.hasOption("h")) {
	    help2();
	}
	if (cmdLine.hasOption("d")) {
	    debugMode = true;
	    System.out.println("Debug mode of madab.");
	}

	if (!cmdLine.hasOption("f")) {
	    if (debugMode == true)
		System.out.println("Conf path needs to be setup");
	    System.exit(0);
	}
	String[] confFilePath = cmdLine.getOptionValues("f");
	loadConfigFile(confFilePath[0]);
	startDatabaseCon();

	// overwriteConfigFile();

	// System.exit(0);

	if (cmdLine.hasOption("m")) {
	    if (debugMode == true)
		System.out.println("Operation move");

	    operationMoveOrCopy("-m", cmdLine.getOptionValue("m"));
	} else if (cmdLine.hasOption("c")) {
	    if (debugMode == true)
		System.out.println("Operation copy");

	    operationMoveOrCopy("-c", cmdLine.getOptionValue("c"));
	} else if (cmdLine.hasOption("s")) {
	    if (debugMode == true)
		System.out.println("Search mode");

	    String[] searchParam = cmdLine.getOptionValues("s");
	    if (searchParam.length == 2) {
		searchMode(searchParam[0], searchParam[1]);
	    } else {
		if (debugMode == true)
		    System.out.println("See --help for value");
		help2();
	    }

	} else {
	    if (debugMode == true)
		System.out.println("See --help for parameters");
	    help2();
	}

	// switch (op) {
	// case "-m": // operation move if (debugMode == true)
	// System.out.println("Operation move");
	//
	// operationMoveOrCopy("a", "a");
	// break;
	// case "-c": // operation copy
	// if (debugMode == true)
	// System.out.println("Operation copy");
	//
	// operationMoveOrCopy("a", "a");
	// break;
	// case "-s":
	// if (debugMode == true)
	// System.out.println("Search mode");
	// searchMode(args);
	// break;
	// default:
	// help2();
	// break;
	// }

    }

    private static Options setupOptions() {
	// create Options object
	Options options = new Options();

	options.addOption("h", "help", false, "How to control madab");
	options.addOption("d", "debug", false, "Run madab in debug mode");
	// options.addOption("c", "copy", false,
	// "Copy malware, add record to database.");
	// options.addOption("s", "search", false, "Search for a malware");

	OptionBuilder.withLongOpt("move");
	OptionBuilder.withArgName("file");
	OptionBuilder.hasArg(true);
	OptionBuilder.withDescription("Move malware, add record to database. If the binary is already known, file is deleted.");
	Option move = OptionBuilder.create("m");
	options.addOption(move);

	OptionBuilder.withLongOpt("copy");
	OptionBuilder.withArgName("file");
	OptionBuilder.hasArg();
	OptionBuilder.withDescription("Copy malware, add record to database.");
	Option copy = OptionBuilder.create("c");
	options.addOption(copy);

	OptionBuilder.withLongOpt("search");
	OptionBuilder.withDescription("Search for malware in database by md5 or sha1 hash, or by name of a file");
	OptionBuilder.hasArgs(2);
	OptionBuilder.withArgName("dm5|sha1|name> <value");
	Option search = OptionBuilder.create("s");
	options.addOption(search);

	OptionBuilder.withLongOpt("conf");
	OptionBuilder.withDescription("madab.conf configuration file");
	OptionBuilder.hasArg(true);
	OptionBuilder.hasArgs(1);
	OptionBuilder.withArgName("file");
	Option conf = OptionBuilder.create("f");
	options.addOption(conf);

	return options;

    }

    private static void help2() {
	HelpFormatter formatter = new HelpFormatter();
	formatter.printHelp("madab.jar", options, true);
	System.exit(0);
    }

    private static void operationMoveOrCopy(String arg, String filePath) {

	String op = "";
	try {
	    op = arg;
	    Path file = Paths.get(filePath);
	    FileInputStream fis = new FileInputStream(file.toFile());
	    fis.close();
	} catch (Exception e) {
	    // if (debugMode == true)
	    System.out.println("File not found or corrupted.");
	    System.exit(0);
	}

	Path file = Paths.get(filePath);
	String name = file.getFileName().toString();
	String md5hash = md5Convertion(file);
	String sha1hash = sha1Convertion(file);
	String location = storagePath + md5hash;

	/*
	 * check whether the malware is in DB, if not, file is moved to malware
	 * storage and a record is created in database if yes, the name of the
	 * file is added in DB and file is deleted
	 */

	if (!isFileAlreadyKnown(md5hash, sha1hash, name)) {
	    switch (op) {
	    case "-m":
		// operation move
		if (debugMode == true) {
		    System.out.println("MD5 hascode: " + md5hash);
		    System.out.println("SHA1 hascode: " + sha1hash);
		}
		createRecordInDatabase(md5hash, sha1hash, location, name);
		moveFile(file, md5hash);

		break;
	    case "-c":
		// operation copy
		if (debugMode == true) {
		    System.out.println("MD5 hascode: " + md5hash);
		    System.out.println("SHA1 hascode: " + sha1hash);
		}
		createRecordInDatabase(md5hash, sha1hash, location, name);
		copyFile(file, md5hash);
		break;
	    }
	} else {
	    /*
	     * if the malware is known, the name is added to the database and
	     * the actual file is removed from users folder
	     */
	    switch (op) {
	    case "-m":
		deleteFile(file);
	    }

	}
	//dbquery();
	stopDatabaseCon();
	System.exit(0);
    }

    private static void searchMode(String op1, String op2) {
	// String op1 = "", op2 = "";
	// try {
	// op1 = args[1];
	// op2 = args[2];
	// } catch (Exception e) {
	// help();
	// System.exit(0);
	// }
	switch (op1) {
	case "md5":
	    Query q = em.createQuery("select m from Malware m where m.md5hash like :op2", Malware.class).setParameter("op2", op2);
	    List<Malware> list = q.getResultList();
	    System.out.println(list);
	    break;
	case "sha1":
	    Query qq = em.createQuery("select m from Malware m where m.sha1hash like :op2", Malware.class).setParameter("op2", op2);
	    List<Malware> list2 = qq.getResultList();
	    System.out.println(list2);
	    break;
	case "name":
	    Query qqq = em.createQuery("select m from Malware m where m.names like '%" + op2 + "%'", Malware.class);
	    // Query qqq =
	    // em.createQuery("select m from Malware m where m.titles like op2",
	    // Malware.class).setParameter("op2", "'%"+op2+"%'");
	    List<Malware> list3 = qqq.getResultList();
	    System.out.println(list3);
	    break;
	default:
	    help2();
	    break;
	}

    }

    /**
     * It loads properties from config file madab.conf which is in root
     * directory of the project
     */
    private static void loadConfigFile(String path) {
	Properties prop = new Properties();

	try {
	    // load a properties file
	    prop.load(new FileInputStream(path));

	    databasePath = prop.getProperty("databasePath");
	    storagePath = prop.getProperty("storagePath");
	    databaseUser = prop.getProperty("databaseUser");
	    databasePassword = prop.getProperty("databasePassword");

	    if (debugMode == true)
		System.out.println("Conf file of madab sucessfully loaded.");
	} catch (IOException ex) {
	    // if (debugMode == true)
	    System.out.println("Unable to load config file.");
	    System.exit(0);
	    // ex.printStackTrace();
	}
    }

    /**
     * It overwrites properties from config file madab.conf which is in root
     * directory of the project
     */
    private static void overwriteConfigFile() {
	String comments = "Configuration file for madab.jar application: \n \n";
	Properties prop = new Properties();

	try {
	    // set the properties value
	    prop.setProperty("storagePath", "/home/wojtyla/workspaceEclipse/MalwareDB/MalwareStorage/");
	    prop.setProperty("databasePath", "/home/wojtyla/workspaceEclipse/MalwareDB/databases/MalwareDB/");
	    prop.setProperty("databaseUser", "madab");
	    prop.setProperty("databasePassword", "madab");

	    // save properties to project root folder
	    prop.store(new FileOutputStream("madab.config"), comments);

	} catch (IOException ex) {
	    if (debugMode == true)
		System.out.println("Unable to write a config file.");
	    // ex.printStackTrace();
	}

    }

    /**
     * Connection to database is created
     */
    private static void startDatabaseCon() {
	try {
	    Map<String, String> properties = new HashMap<String, String>();
	    properties.put("javax.persistence.jdbc.driver", databaseDriver);
	    properties.put("javax.persistence.jdbc.url", databasePathPrefix + databasePath + databasePathSuffix);
	    properties.put("javax.persistence.jdbc.user", databaseUser);
	    properties.put("javax.persistence.jdbc.password", databasePassword);
	    factory = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT_NAME, properties);

	    em = factory.createEntityManager();

	    // just to try if schema, username, a table exist
	    Query q = em.createQuery("select m from Malware m");

	    if (debugMode == true)
		System.out.println("Database successfully connected.");

	} catch (Exception e) {
	    // if (debugMode == true)
	    System.out.println("Unable to connect to database. Check database path, username or password. Please try again.");
	    // e.printStackTrace();
	    System.exit(0);
	}

    }

    /**
     * Connection to database is closed
     */
    private static void stopDatabaseCon() {
	em.close();
	factory.close();
    }

    /**
     * it goes all records in database and check if the md5hash and sha1hash is
     * already presented if yes, the name is added to column titles and it
     * return true if not, false is returned
     * 
     * @param md5hash
     * @param sha1hash
     */
    private static boolean isFileAlreadyKnown(String md5hash, String sha1hash, String name) {
	// Query q = em.createQuery("select m from Malware m");
	em.getTransaction().begin();
	Query tquery = em.createQuery("select m from Malware m", Malware.class);

	List<Malware> list = tquery.getResultList();

	for (Iterator<Malware> iterator = list.iterator(); iterator.hasNext();) {
	    Malware malware = (Malware) iterator.next();

	    // TODO Auto-generated method stub
	    // if one of them md5 or sha1 is same and the other ones are
	    // different, ALLERT
	    // MD5 ADN SHA1 should be always both same with tested subject or
	    // both negative
	    if ((md5hash.contentEquals(malware.getMd5hash()))) {
		if (debugMode == true)
		    System.out.println("malware already presented in database.");
		malware.addName(name);

		em.merge(malware);

		em.getTransaction().commit();
		return true;
	    }
	}
	return false;
    }

    /**
     * Query to print whole content of database.
     */
    private static void dbquery() {

	em.getTransaction().begin();
	Query q = em.createQuery("select m from Malware m");

	System.out.println(q.getResultList());

	em.getTransaction().commit();
    }

    /**
     * tries to connect to database and handle requests
     */
    private static void createRecordInDatabase(String md5, String sha1, String location, String name) {
	// ./ij
	// connect
	// 'jdbc:derby:/home/wojtyla/workspaceEclipse/databases/MalwareDB';
	// show tables;
	// disconnect;

	// EntityManagerFactory factory =
	// Persistence.createEntityManagerFactory(PERSISTENCE_UNIT_NAME);
	em = factory.createEntityManager();

	em.getTransaction().begin();

	Malware temp = new Malware();
	temp.setMd5hash(md5);
	temp.setSha1hash(sha1);
	temp.setLocation(storagePath + md5);
	temp.addName(name);

	em.persist(temp);

	em.getTransaction().commit();
    }

    private static void help() {
	System.out.println("madab:");
	System.out.println("-m /file - move malware to DB");
	System.out.println("-c /file - copy malware to DB");
	System.out.println("-s -md5 /file - search for a malware by md5 hash");
	System.out.println("-s -sha1 /file - search for a malware by sha1 hash");
	System.out.println("-s -n /file - search for a malware by name hash");
	System.out.println("-d as last parametr - debug mode");

    }

    /*
     * it deletes the file from user's location
     */

    private static void deleteFile(Path file) {
	try {
	    Files.deleteIfExists(file);
	} catch (DirectoryNotEmptyException e2) {
	    if (debugMode == true)
		System.out.println("File is a non-empty directory and cannot be deleted.");
	} catch (IOException e) {
	    if (debugMode == true)
		System.out.println("File could not be removed.");
	}

    }

    /*
     * it moves the file to storage location and rename it with md5 hash
     * existing file is overwritten
     */
    private static void moveFile(Path file, String md5hash) {
	Path target = Paths.get(storagePath, md5hash);
	try {
	    Files.move(file, target, REPLACE_EXISTING);
	} catch (IOException e) {
	    // if (debugMode == true)
	    System.out.println("Unable to move the file.");
	    // e.printStackTrace();
	}

    }

    /*
     * it copy the malware file
     */

    private static void copyFile(Path file, String md5hash) {
	Path target = Paths.get(storagePath, md5hash);
	try {
	    Files.copy(file, target, REPLACE_EXISTING);
	} catch (IOException e) {
	    // if (debugMode == true)
	    System.out.println("Unable to copy the file");
	    // e.printStackTrace();
	}

    }

    /*
     * Function calculate md5 hash of given file
     */
    public static String md5Convertion(Path file) {
	try {
	    MessageDigest md = MessageDigest.getInstance("MD5");

	    FileInputStream fis = new FileInputStream(file.toFile());

	    byte[] dataBytes = new byte[9999];

	    int read = 0;

	    while ((read = fis.read(dataBytes)) != -1) {
		md.update(dataBytes, 0, read);
	    }
	    ;

	    byte[] mdbytes = md.digest();

	    StringBuffer hexString = new StringBuffer();
	    for (int i = 0; i < mdbytes.length; i++) {
		String hex = Integer.toHexString(0xff & mdbytes[i]);
		if (hex.length() == 1)
		    hexString.append('0');
		hexString.append(hex);
	    }

	    fis.close();
	    return hexString.toString();

	} catch (Exception e) {
	    // e.printStackTrace();
	    // if (debugMode == true)
	    System.out.println("Problem with file occured, unable to do a md5 hash, check the file.");
	}
	return "0";

    }

    /*
     * Function calculate sha1 hash of given file
     */
    private static String sha1Convertion(Path file) {
	try {
	    MessageDigest md = MessageDigest.getInstance("SHA1");

	    FileInputStream fis = new FileInputStream(file.toFile());

	    byte[] dataBytes = new byte[9999];

	    int read = 0;

	    while ((read = fis.read(dataBytes)) != -1) {
		md.update(dataBytes, 0, read);
	    }
	    ;

	    byte[] mdbytes = md.digest();

	    StringBuffer hexString = new StringBuffer();
	    for (int i = 0; i < mdbytes.length; i++) {
		String hex = Integer.toHexString(0xff & mdbytes[i]);
		if (hex.length() == 1)
		    hexString.append('0');
		hexString.append(hex);
	    }

	    fis.close();
	    return hexString.toString();

	} catch (Exception e) {
	    // e.printStackTrace();
	    // if (debugMode == true)
	    System.out.println("Problem with file occured, unable to do a sha1 hash, check the file.");
	}
	return "-1";

    }

}
