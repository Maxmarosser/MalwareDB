package database;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Malware {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    //id of record in database
    private Long id;
    //md5 hash of binary file
    private String md5hash = "-1";
    //sha1 hash of binary file
    private String sha1hash = "-1";
    //String holds different names of binaries, separated by pipe character
    private String names = "";
    //String where the binary file is stored
    private String location = "-";
    //size of binary file in bytes
    private Long sizeInBytes = 0L;
    //date when a binary was indexed into db in millis since 1.1.1970
    private Long dateInMillis = 0L;
    //status of binary. When a experiments is done, short description about the state
    private String status = "none";

    public Long getId() {
	return id;
    }

    public void setId(Long id) {
	this.id = id;
    }

    public String getMd5hash() {
	return md5hash;
    }

    public void setMd5hash(String md5hash) {
	this.md5hash = md5hash;
    }

    public String getSha1hash() {
	return sha1hash;
    }

    public void setSha1hash(String sha1hash) {
	this.sha1hash = sha1hash;
    }

    public String getNames() {
	return names;
    }

    public void addName(String name) {
	if (!(this.names.contains(name))) {
	    if (names.isEmpty()) {
		this.names = name;
	    } else {
		this.names = (this.names + "|" + name);

	    }
	}
    }

    public String getLocation() {
	return location;
    }

    public void setLocation(String location) {
	this.location = location;
    }


    public Long getSizeInBytes() {
        return sizeInBytes;
    }

    public void setSizeInBytes(Long sizeInBytes) {
        this.sizeInBytes = sizeInBytes;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Long getTimestampInMillis() {
        return dateInMillis;
    }

    public void setTimestampInMillis(Long timestampInMillis) {
        this.dateInMillis = timestampInMillis;
    }

    @Override
    public String toString() {
        DateFormat formatter = new SimpleDateFormat("yyy:MM:dd-HH:mm:ss");

        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(dateInMillis);
      
	return (md5hash + "," + sha1hash + ","+ names + "," + location + "," +sizeInBytes+ ","+formatter.format(calendar.getTime())+","+status+"\n");
    }

    @Override
    public int hashCode() {
	final int prime = 31;
	int result = 1;
	result = prime * result + ((dateInMillis == null) ? 0 : dateInMillis.hashCode());
	result = prime * result + ((id == null) ? 0 : id.hashCode());
	result = prime * result + ((location == null) ? 0 : location.hashCode());
	result = prime * result + ((md5hash == null) ? 0 : md5hash.hashCode());
	result = prime * result + ((names == null) ? 0 : names.hashCode());
	result = prime * result + ((sha1hash == null) ? 0 : sha1hash.hashCode());
	result = prime * result + ((sizeInBytes == null) ? 0 : sizeInBytes.hashCode());
	return result;
    }

    @Override
    public boolean equals(Object obj) {
	if (this == obj)
	    return true;
	if (obj == null)
	    return false;
	if (getClass() != obj.getClass())
	    return false;
	Malware other = (Malware) obj;
	if (dateInMillis == null) {
	    if (other.dateInMillis != null)
		return false;
	} else if (!dateInMillis.equals(other.dateInMillis))
	    return false;
	if (id == null) {
	    if (other.id != null)
		return false;
	} else if (!id.equals(other.id))
	    return false;
	if (location == null) {
	    if (other.location != null)
		return false;
	} else if (!location.equals(other.location))
	    return false;
	if (md5hash == null) {
	    if (other.md5hash != null)
		return false;
	} else if (!md5hash.equals(other.md5hash))
	    return false;
	if (names == null) {
	    if (other.names != null)
		return false;
	} else if (!names.equals(other.names))
	    return false;
	if (sha1hash == null) {
	    if (other.sha1hash != null)
		return false;
	} else if (!sha1hash.equals(other.sha1hash))
	    return false;
	if (sizeInBytes == null) {
	    if (other.sizeInBytes != null)
		return false;
	} else if (!sizeInBytes.equals(other.sizeInBytes))
	    return false;
	return true;
    }

}
